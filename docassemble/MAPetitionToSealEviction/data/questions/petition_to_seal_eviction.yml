---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.MassAccess:massaccess.yml
---
metadata:
  title: >-
    Petition to Seal Eviction
  short title: >-
    Petition to Seal Eviction
  description: |-
    This interview helps someone in Massachusetts file a Petition to Seal a prior eviction from public record.
  can_I_use_this_form: |
    If you are a tenant-defendant, you can use this interview to petition a court to seal a past eviction from public record.
  before_you_start: |
    This interview will help you file a Petition to Seal an Eviction.
    
    Before you get started, please gather:
    
    1. Eviction Action Court Docket Number
    2. Landlord (Plaintiff) Name and Address
    3. Any Documents from the Eviction Action
    
    When you are finished, you will need to:
    
    E-File the petition with the applicable court
  maturity: production
  estimated_completion_minutes: 10
  estimated_completion_delta: 5
  LIST_topics: 
    - "CO-00-00-00-00"
    - "CO-07-00-00-00"
    - "HO-02-00-00-00"
  tags:
    - "CO-00-00-00-00"
    - "CO-07-00-00-00"
    - "HO-02-00-00-00"
  authors:
    - Taline
    - Rami
  original_form: []
  original_form_published_on: 2025-02-06
  allowed_courts: 
    - "District Court"
    - "Housing Court"
    - "Superior Court"
  typical_role: "defendant"
  al_weaver_version: "1.11.0"
  generated_on: "2025-02-06"
  languages:
    - en
  jurisdiction: NAM-US-US+MA
  review_date: 2025-02-06
  form_titles:
    - Petition to Seal Eviction
  form_numbers: []
  update_notes: |
---
code: |
  # This controls the default country and list of states in address field questions
  AL_DEFAULT_COUNTRY = "US"
---
code: |
  # This controls the default state in address field questions
  AL_DEFAULT_STATE = "MA"
---
code: |
  github_repo_name =  'docassemble-PetitionToSealEviction'
---
code: |
  interview_short_title = "File a Petition to Seal an Eviction"
---
code: |
  al_form_type = "existing_case" 
---
objects:
  - attorneys: ALPeopleList
  - other_parties: ALPeopleList
  - users: ALPeopleList.using(there_are_any=True)
---
sections:
  - review_petition_to_seal_eviction: Review your answers
---
#################### Interview order #####################
comment: |
  Controls order and branching logic for questions specific to this form
id: interview_order_petition_to_seal_eviction
code: |
  # Set the allowed courts for this interview
  allowed_courts = ['District Court', 'Housing Court', 'Superior Court']
  nav.set_section("review_petition_to_seal_eviction")
  user_role = "defendant"
  user_ask_role = "defendant"
  case_dismissed
  if not case_dismissed:
    judgment_outcome
    if judgment_outcome == "landlord":
      eviction_reason_nonpayment
      eviction_reason_fault
      eviction_reason_nofault
      eviction_reason_139
      if eviction_reason_nonpayment:
        non_payment
        if non_payment:
          non_payment_cured
        if not non_payment:
          non_payment_hardship 
    judgment_date
    if judgment_date > today().minus(years=7).minus(days=10):
      continue_inapplicable
    if judgment_date > today().minus(years=4).minus(days=10):
      continue_inapplicable
  set_progress(14)
  fe_appl_period_exp
  no_fault
  ejp_appl_period_exp
  no_judgmt_appl_exp
  set_progress(28)
  notice_date
  trial_court.department
  trial_court.division
  docket_number
  set_progress(42)
  other_parties.gather()
  users[0].siganture
  users.gather()
  set_parts(subtitle=str(users))
  users[0].email
  users[0].address.address
  set_progress(56)
  users[0].phone_number
  attorneys_name
  attorneys.email
  signature_date
  interview_order_petition_to_seal_eviction = True
---
###################### Main order ######################
comment: |
  This block includes the logic for standalone interviews.
  Delete mandatory: True to include in another interview
mandatory: True
code: |
  al_intro_screen
  petition_to_seal_eviction_intro
  interview_order_petition_to_seal_eviction
  signature_date
  # Store anonymous data for analytics / statistics
  store_variables_snapshot(
      persistent=True,
      data={
          "zip": showifdef("users[0].address.zip"),
          "reached_interview_end": True,
      },
  )
  petition_to_seal_eviction_preview_question
  basic_questions_signature_flow
  petition_to_seal_eviction_download
---
id: Petition_to_Seal_Eviction
continue button field: petition_to_seal_eviction_intro
question: |
  Petition to Seal Eviction
subquestion: |
  This interview will help you file a Petition to Seal an Eviction.
  
  Before you get started, please gather:
  
  1. Eviction Action Court Docket Number
  2. Landlord (Plaintiff) Name and Address
  3. Any Documents from the Eviction Action
  
  When you are finished, you will need to:
  
  E-File the petition with the applicable court

  If you are a tenant-defendant, you can use this interview to petition a court to seal a past eviction from public record.

  Most people take about 10 minutes to complete this interview.
---
id: Eviction Reason
question: |
  Reason for eviction
subquestion: |
  What was the reason for your eviction?
fields:
  - "Non-Payment of Rent": eviction_reason_nonpayment
    datatype: yesno
  - "Fault": eviction_reason_fault
    datatype: yesno
  - "No Fault": eviction_reason_nofault
    datatype: yesno
  - "Action under 139": eviction_reason_139
    datatype: yesno
---
id: Off Ramp
question: |
  Does Not Apply to User
fields:
  - "Continue": continue_inapplicable
    datatype: yesnoradio
---
id: Non Payment Paid
question: |
  Non-Payment Paid
subquestion: |
  How was your payment deemed satisfied?
fields:
  - "My landlord filed Notice of Satisfaction": plan_filed_notice
    datatype: yesno
    required: False
  - "A Judge deemed all unpaid rent satisfied": court_deemed_paid
    datatype: yesno
    required: False
  - "My payment has not been officially deemed satisfied": non_payment_cured
    datatype: yesno
    required: False
---
id: Non Payment Not Paid
question: |
  Non-Payment Not Paid
subquestion: |
  Have you paid all amounts due in your eviction action?
fields:
  - " ": non_payment
    datatype: yesnoradio
    required: False
---
id: Non Payment Not Paid for Hardship
question: |
  Non-Payment Not Paid for Hardship
subquestion: |
  Were you not able to pay all amounts due because of economic hardship?
fields:
  - " ": non_payment_hardship
    datatype: yesnoradio
    required: False
---
id: Fault Eviction
question: |
  Fault Eviction
subquestion: |
  My eviction was a fault eviction and the appeal period has expired.
fields:
  - "Fault Eviction Appeal Period Expired": fe_appl_period_exp
    datatype: yesnoradio
    required: False
  - "Eviction Was Fault": fault_eviction
    datatype: yesnoradio
    required: False
---
id: No Fault Eviction
question: |
  No Fault Eviction
subquestion: |
  My eviction was no fault and the appeal period has expired.
fields:
  - "Eviction Was No Fault": no_fault
    datatype: yesnoradio
    required: False
---
id: Fault Action Section 139
question: |
  Fault Action (Section 139)
subquestion: |
  My eviction action was filed under Section 139, judgment entered for the landlord, the appeal period has expired, and I have not been convicted of any crimes during the appeal period.
fields:
  - "Appeal Period Expired in 139 Case": ejp_appl_period_exp
    datatype: yesnoradio
    required: False
  - "Judgment For Landlord in 139 Case": eviction_judgmt_plan
    datatype: yesnoradio
    required: False
---
id: Fault Action Judgment For Section 139
question: |
  Fault Action Judgment For (Section 139)
subquestion: |
  My eviction action was filed under Section 139, judgment did not enter for the landlord, and the appeal period has expired.
fields:
  - "No Judgment in Section 139 Case": no_judgmt_appl_exp
    datatype: yesnoradio
    required: False
---
id: Notice
question: |
  Notice
subquestion: |
  Notice was given to the Plaintiff in the following manner.
fields:
  - "Date of Notice": notice_date
    datatype: date
  - "Notice Given by Email": email
    datatype: yesno
    required: False
  - "Notice Given to Plaintiff": plaintiff_notice
    datatype: yesno
    required: False
  - "Notice Given by Mail": mail
    datatype: yesno
    required: False
  - "Notice Given in Person": in_person
    datatype: yesno
    required: False
  - "Notice Given to Plaintiff's Lawyer": plaintiff_lawyer
    datatype: yesno
    required: False
---
id: Petitioner Information
question: |
  Petitioner Information
subquestion: |
  Enter your information
fields:
  - "Your Signature": users[0].siganture
---
id: Attorney Information
question: |
  Attorney Information
subquestion: |
  Enter your attorney's information
fields:
  - "Attorney Email": attorneys.email
    required: False
  - "Attorney Name": attorneys_name
    required: False
---
id: Date of Judgment
question: |
  Date of Judgment
subquestion: |
  What was the judgment date of your eviction action?
fields:
  - "Judgment Date": judgment_date
    datatype: date
---
id: Judgment Outcome
question: |
  Judgment Outcome
subquestion: |
  What was the outcome of you eviction judgment?
fields:
  - "Judgment was entered for": judgment_outcome
    datatype: radio
    choices:
      - Landlord: landlord
      - Me: tenant
---
id: Eviction Action Dismissed
question: |
  Eviction Action Dismissed
subquestion: |
  My eviction action was dismissed.
fields:
  - "Eviction Case Was Dismissed": case_dismissed
    datatype: yesnoradio
    required: False
---
id: preview petition_to_seal_eviction
question: |
  Preview your form before you sign it
subquestion: |
  Here is a preview of the form you will sign on the next page.   
  
  ${ al_court_bundle.as_pdf(key='preview') }

  Click the image to open it in a new tab. Click the "Edit answers" button
  to edit your answers.

  ${ action_button_html(url_action('review_petition_to_seal_eviction'), label='Edit answers', color='info') }
  
  Remember to come back to this window to continue and sign your form.
continue button field: petition_to_seal_eviction_preview_question    
---
code: |
  signature_fields = ['users[0].siganture']
---
code: |
  # This is a placeholder for the addresses that will be searched
  # for matching address to court. Edit if court venue is based on 
  # a different address than the user's
  [user.address.address for user in users.complete_elements()]
  addresses_to_search = [user.address for user in users.complete_elements()]
---
id: petition to seal eviction review screen
event: review_petition_to_seal_eviction
question: |
  Review your answers
review:
  - Edit: attorneys.revisit
    button: |
      **Attorneys**

      % for item in attorneys:
        * ${ item }
      % endfor
  - Edit: users.revisit
    button: |
      **Users**

      % for item in users:
        * ${ item }
      % endfor
  - Edit: def_against
    button: |
      **Judgment for Landlord**:
      ${ word(yesno(def_against)) }
  - Edit: docket_number
    button: |
      **Docket number**:
      ${ docket_number }
  - Edit: other_parties.revisit
    button: |
      **Other parties**

      % for item in other_parties:
        * ${ item }
      % endfor
  - Edit: signature_date
    button: |
      **Date of Signature**:
      ${ signature_date }
  - Edit: non_payment_cured
    button: |
      **All Amounts Paid**:
      ${ word(yesno(non_payment_cured)) }
  - Edit: plan_filed_notice
    button: |
      **Landlord Filed Notice of Satisfaction**:
      ${ word(yesno(plan_filed_notice)) }
  - Edit: trial_court
    button: |
      **Trial court**
  
      % if defined("trial_court.division"):
      * division: ${ trial_court.division }
      % endif
      % if defined("trial_court.department"):
      * department: ${ trial_court.department }
      % endif
  - Edit: notice_date
    button: |
      **Date of Notice**:
      ${ notice_date }
  - Edit: non_payment_hardship
    button: |
      **Unable to Pay Amount of Judgment**:
      ${ word(yesno(non_payment_hardship)) }
  - Edit: no_judgmt_appl_exp
    button: |
      **No Judgment in Section 139 Case**:
      ${ word(yesno(no_judgmt_appl_exp)) }
  - Edit: email
    button: |
      **Notice Given by Email**:
      ${ word(yesno(email)) }
  - Edit: def_for
    button: |
      **Judgment in my Favor**:
      ${ word(yesno(def_for)) }
  - Edit: plaintiff_notice
    button: |
      **Notice Given to Plaintiff**:
      ${ word(yesno(plaintiff_notice)) }
  - Edit: non_payment
    button: |
      **Non-Payment Judgment Not Paid**:
      ${ word(yesno(non_payment)) }
  - Edit: court_deemed_paid
    button: |
      **Judge Deemed Payment Satisfied**:
      ${ word(yesno(court_deemed_paid)) }
  - Edit: ejp_appl_period_exp
    button: |
      **Appeal Period Expired in 139 Case**:
      ${ word(yesno(ejp_appl_period_exp)) }
  - Edit: mail
    button: |
      **Notice Given by Mail**:
      ${ word(yesno(mail)) }
  - Edit: no_fault
    button: |
      **Eviction Was No Fault**:
      ${ word(yesno(no_fault)) }
  - Edit: in_person
    button: |
      **Notice Given in Person**:
      ${ word(yesno(in_person)) }
  - Edit: fe_appl_period_exp
    button: |
      **Fault Eviction Appeal Period Expired**:
      ${ word(yesno(fe_appl_period_exp)) }
  - Edit: case_dismissed
    button: |
      **Eviction Case Was Dismissed**:
      ${ word(yesno(case_dismissed)) }
  - Edit: fault_eviction
    button: |
      **Eviction Was Fault**:
      ${ word(yesno(fault_eviction)) }
  - Edit: plaintiff_lawyer
    button: |
      **Notice Given to Plaintiff's Lawyer**:
      ${ word(yesno(plaintiff_lawyer)) }
  - Edit: eviction_judgmt_plan
    button: |
      **Judgment For Landlord in 139 Case**:
      ${ word(yesno(eviction_judgmt_plan)) }
  - Edit: judgment_date
    button: |
      **Judgment Date**:
      ${ judgment_date }
---
continue button field: attorneys.revisit
question: |
  Edit attorneys
subquestion: |
  ${ attorneys.table }

  ${ attorneys.add_action() }
---
table: attorneys.table
rows: attorneys
columns:
  - Email: |
      row_item.email if defined("row_item.email") else ""
  - Signature: |
      row_item.signature if defined("row_item.signature") else ""
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
edit:
  - email
  - signature
  - name.first
confirm: True

---
continue button field: users.revisit
question: |
  Edit users
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - Email: |
      row_item.email if defined("row_item.email") else ""
  - Siganture: |
      row_item.siganture if defined("row_item.siganture") else ""
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Address: |
      row_item.address.block() if defined("row_item.address.address") else ""
  - Phone number: |
      row_item.phone_number if defined("row_item.phone_number") else ""
edit:
  - email
  - siganture
  - name.first
  - address.address
  - phone_number
confirm: True

---
continue button field: other_parties.revisit
question: |
  Edit other_parties
subquestion: |
  ${ other_parties.table }

  ${ other_parties.add_action() }
---
table: other_parties.table
rows: other_parties
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
edit:
  - name.first
confirm: True

---
id: download petition_to_seal_eviction
event: petition_to_seal_eviction_download
question: |
  All done
subquestion: |
  Thank you ${users}. Your form is ready to download and deliver.
  
  View, download and send your form below. Click the "Edit answers" button to fix any mistakes.

  ${ action_button_html(url_action('review_petition_to_seal_eviction'), label='Edit answers', color='info') }
  
  
  ${ al_user_bundle.download_list_html() }
  

  ${ al_user_bundle.send_button_html(show_editable_checkbox=True) }

progress: 100
---
# ALDocument objects specify the metadata for each template
objects:
  - petition_to_seal_eviction_Post_interview_instructions: ALDocument.using(title="Instructions", filename="petition_to_seal_eviction_next_steps.docx", enabled=True, has_addendum=False)
  - petition_to_seal_eviction_attachment: ALDocument.using(title="Petition to Seal Eviction", filename="petition_to_seal_eviction", enabled=True, has_addendum=False, )
---
# Bundles group the ALDocuments into separate downloads, such as for court and for the user
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[petition_to_seal_eviction_Post_interview_instructions, petition_to_seal_eviction_attachment], filename="petition_to_seal_eviction", title="All forms to download for your records", enabled=True)
  - al_court_bundle: ALDocumentBundle.using(elements=[petition_to_seal_eviction_attachment],  filename="petition_to_seal_eviction", title="All forms to deliver to court", enabled=True)
---
# Each attachment defines a key in an ALDocument. We use `i` as the placeholder here so the same template is 
# used for "preview" and "final" keys, and logic in the template checks the value of 
# `i` to show or hide the user's signature
attachment:
  name: Post-interview-Instructions
  filename: petition_to_seal_eviction_next_steps
  docx template file: petition_to_seal_eviction_next_steps.docx
  variable name: petition_to_seal_eviction_Post_interview_instructions[i]
  skip undefined: True
  tagged pdf: True
---
attachment:
  name: petition to seal eviction
  filename: petition_to_seal_eviction
  variable name: petition_to_seal_eviction_attachment[i]
  skip undefined: True
  docx template file: petition_to_seal_eviction.docx
  tagged pdf: True



