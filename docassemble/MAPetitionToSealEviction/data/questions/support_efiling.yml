---
#########################################################
# Staging docket numbers for testing:

# Worcester DC: 2462SU000001 (already sealed so will reflect "anonymous" as party names)
# Worcester DC: 2462SU000003
# Eastern HC (Boston): 23H84SP000009

# Case category: Summary Process
# Filing type: "Petition to Seal Eviction Record" (numeric code might not match between staging/prod)

# Test multiple case / party name lookups: in Eastern Housing Court, use party name John Brown (not fileable)

---
include:
  - docassemble.EFSPIntegration:efiling_integration.yml
  - docassemble.EFSPIntegration:case_search.yml
  - docassemble.EFSPIntegration:unauthenticated_actions.yml  
---
need:
  - notice_of_appearance_form_attachment.enabled
################ Trigger the e-filing variables in order #################
code: |
  
  if can_check_efile:
    if petition_is_efileable:
      show_any_disclaimers
      al_court_bundle.has_courtesy_copies

      # Start slightly time-consuming e-filing prep
      users[0].is_form_filler
      efile_case_category
      efile_case_type
      cross_references.gather()
      # petition_to_seal_eviction_attachment.completed # Trigger the e-filing specific variables. I don't really like this being hidden like it is now though!
      al_court_bundle.filing_parties
      for item in al_court_bundle.enabled_documents():
        item.filing_component
        item.filing_type
        item.filing_parties
        item.filing_attorney
      al_court_bundle.completed

      review_fees
      ready_to_efile

      # launch the background task to check e-file readiness
      # This makes the fee_resp and check_resp variables
      if not efile_calculation_task.ready():
        efile_calculation_task_waiting_screen      
    else:
      warn_sorry_not_efileable

  if petition_is_efileable:
    tyler_payment_id

    efile_user_reviewed

  if petition_is_efileable:
    efile_once

  interview_order_efiling = True
---
id: efile
code: |
  # Q: I put this in its own block to prevent possible idempotency issues. Not sure if necessary
  efile
  efile_once = True
---
continue button field: interstitial_screen
question: |
  We are ready to e-file your forms
---
code: |
  efile_calculation_task = background_action("efile_calculation_background_task")
---
event: efile_calculation_background_task
code: |
  # All the time-consuming stuff that doesn't require user interaction  

  # # Make the cached PDFs
  # download_response = al_court_bundle.get_cacheable_documents(key="final", pdf=True, docx=False, include_full_pdf=True)

  if not fees_resp.is_ok():
    log("Something went wrong with the fees calculation")
  
  check_resp = proxy_conn.check_filing(court_id, al_court_bundle)
  
  ready_to_efile

  background_response_action(
      "efile_calculation_task_save_variables",
      fees_resp=fees_resp,
      check_resp=check_resp,
  )
---
id: save efile variables calculated in background action
event: efile_calculation_task_save_variables
code: |
  fees_resp = action_argument("fees_resp")
  check_resp = action_argument("check_resp")

  background_response()
---
id: efile calculation task waiting screen
event: efile_calculation_task_waiting_screen
question: |
  Verifying information for e-filing
subquestion: |
  <div class="container animation-container">
    <div class="icons-wrapper">
      <!-- File icon that slides across -->
      <i class="fas fa-file file-icon"></i>
      <!-- Spinning cog icon representing processing -->
      <i class="fas fa-cog spinner-icon"></i>
    </div>
  </div>
css: |
  <style>
    .animation-container {
      margin: 50px auto;
      text-align: center;
      max-width: 600px;
      position: relative;
    }
    .icons-wrapper {
      position: relative;
      height: 150px;
    }
    /* File icon animation: slides from left to right and resets */
    .file-icon {
      font-size: 3rem;
      color: #007bff;
      position: absolute;
      top: 30%;
      /* The animation lasts 4s and loops infinitely */
      animation: slideFile 4s linear infinite;
    }
    /* Spinning cog icon for processing (infinite spin) */
    .spinner-icon {
      font-size: 3rem;
      color: #6c757d;
      position: absolute;
      right: 0;
      top: 30%;
      animation: spin 2s linear infinite;
    }
    /* Keyframes for the sliding file icon */
    @keyframes slideFile {
      0% {
        left: -50px;
        opacity: 0;
        transform: translateY(-50%) scale(0.8);
      }
      15% {
        opacity: 1;
        transform: translateY(-50%) scale(1);
      }
      45% {
        left: 50%;
        opacity: 1;
        transform: translateX(-50%) translateY(-50%) scale(1);
      }
      70% {
        left: 110%;
        opacity: 0;
        transform: translateY(-50%) scale(0.8);
      }
      100% {
        left: -50px;
        opacity: 0;
        transform: translateY(-50%) scale(0.8);
      }
    }
    /* Keyframes for spinning (used by the cog icon) */
    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }
      100% {
        transform: rotate(360deg);
      }
    }
  </style>
reload: 5
---
# code: |
#   efile_submission_task = background_action("efile_submission_background_task")
# ---
# event: efile_submission_background_task
# code: |
#   # Send the actual documents to the court
#   efile_resp
#   efile = efile_resp.is_ok()
#   background_response_action("efile_submission_task_save_variables", efile_resp=efile_resp, efile=efile)
# ---
# event: efile_submission_task_save_variables
# code: |
#   efile_resp=action_argument("efile_resp")
#   efile=action_argument("efile")
#   background_response()
# ---
# id: efile submission waiting screen
# event: efile_submission_waiting_screen
# question: |
#   Sending your forms to the court
# subquestion: |
#   <div class="container text-center">
#     <div class="animation-container">
#       <!-- File icon that moves -->
#       <i class="fas fa-file-alt file-icon"></i>
#       <!-- Bouncing arrow in the center -->
#       <i class="fas fa-arrow-right arrow"></i>
#       <!-- Cloud icon where the file goes -->
#       <i class="fas fa-cloud cloud-icon"></i>
#     </div>
#   </div>

# css: |
#   <style>
#     /* Page background */
#     body {
#       background-color: #f8f9fa;
#     }

#     /* Animation container */
#     .animation-container {
#       position: relative;
#       height: 200px;
#       margin-top: 50px;
#     }

#     /* Style for the file icon */
#     .file-icon {
#       font-size: 4rem;
#       position: absolute;
#       left: 0;
#       top: 50%;
#       transform: translateY(-50%);
#       /* Animation that moves the file icon */
#       animation: moveFile 3s infinite;
#     }

#     /* Style for the cloud icon */
#     .cloud-icon {
#       font-size: 4rem;
#       position: absolute;
#       right: 0;
#       top: 50%;
#       transform: translateY(-50%);
#       color: #6c757d;
#     }

#     /* Animation keyframes for the file moving across */
#     @keyframes moveFile {
#       0% {
#         left: 0;
#         opacity: 0;
#         transform: translateY(-50%) scale(0.5);
#       }
#       10% {
#         opacity: 1;
#         transform: translateY(-50%) scale(1);
#       }
#       50% {
#         left: 45%;
#         opacity: 1;
#         transform: translateY(-50%) scale(1);
#       }
#       70% {
#         left: 70%;
#         opacity: 0.5;
#         transform: translateY(-50%) scale(0.8);
#       }
#       100% {
#         left: 100%;
#         opacity: 0;
#         transform: translateY(-50%) scale(0.5);
#       }
#     }

#     /* Style for the bouncing arrow */
#     .arrow {
#       position: absolute;
#       top: 50%;
#       left: 50%;
#       transform: translate(-50%, -50%);
#       font-size: 2rem;
#       opacity: 0.5;
#       animation: bounce 1.5s infinite;
#     }

#     /* Bouncing keyframes for the arrow */
#     @keyframes bounce {
#       0%, 100% {
#         transform: translate(-50%, -50%) translateY(0);
#       }
#       50% {
#         transform: translate(-50%, -50%) translateY(-10px);
#       }
#     }
#   </style>

# reload: 5
---
code: |
  form_uses_efiling = True
---
code: |
  # TODO: add any restrictions here
  # e.g., currently we don't handle 139 section 19 cases
  if can_check_efile and showifdef("case_search.found_case"):
    if trial_court.department == "Superior Court":
      petition_is_efileable = False
    elif "summary process" in case_search.found_case.case_category_name.lower():
      # I guess that district court may not have correctly coded case types, so we don't know exact case type
      # but it does seem that they can seal a 139 19 if it was coded under summary process anyway
      petition_is_efileable = True
    else:
      petition_is_efileable = False
    # # Check the case type for a valid one
    # elif predicted_eviction_reason in ("eviction_reason_nofault", "eviction_reason_fault", "eviction_reason_nonpayment"):
    #   petition_is_efileable = True
    # else:
    #   petition_is_efileable = False
      # Currently, there is no Petition to Seal Eviction code for any other case types
---
code: |
  is_initial_filing = False
---
objects:
  - case_search: EFCaseSearch.using(court_id=trial_court.tyler_code)
---
code: |
  target_case = case_search
---
code: |
  # We use a global waiver account since this filing never uses a filing fee
  tyler_payment_id = get_config('efile proxy', {}).get('global waivers', {}).get('massachusetts', '')
---
code: |
  jurisdiction_id = 'massachusetts'
---
code: |
  # TODO: rename?
  proxy_conn = ProxyConnection(credentials_code_block='tyler_login', default_jurisdiction=jurisdiction_id)
---
code: |
  if can_check_efile and showifdef("case_search.found_case"):
    efile_case_category = case_search.found_case.category
    efile_case_type = case_search.found_case.case_type
---
code: |
  # https://efile-test.suffolklitlab.org/jurisdictions/massachusetts/codes/courts/537/filing_types/101805
  petition_to_seal_eviction_attachment.filing_type_filters = ['Petition to Seal Eviction Record', 'Seal Eviction']
  petition_to_seal_eviction_attachment.filing_type_default = '101805'

  notice_of_appearance_form_attachment.filing_type_filters = ['Appearance filed']
  notice_of_appearance_form_attachment.filing_type_default = '12770' # 12770 is for housing court, 

  al_court_bundle.filing_type_filters = ['Petition to Seal Eviction Record', 'Seal Eviction']
  al_court_bundle.filing_type_default = '101805'
---
code: |
  users[i].party_type_filters = ['Defendant/Appellant', 'Defendant/Petitioner']
  users[i].party_type_default = '1729'
  users[i].party_type_exclude = None
---
code: |
  other_parties[i].party_type_filters = ['Plaintiff/Appellee', 'Plaintiff/Respondent']
  other_parties[i].party_type_default = '1736'
  other_parties[i].party_type_exclude = None
---
id: user-wants-efile
question: |
  Do you want to e-file this document directly with the court?
subquestion: |
  E-filing is completely free and is the fastest way to file this document.

  You need a free account with eFileMA to e-file this document. We can help you make the account on
  the next screens if you do not already have one.

  ${ collapse_template(to_make_an_account_you_need_template) }

  ${ collapse_template(what_is_efile_ma_template) }

  If you do not want to e-file this document, you can print it at the end of this interview and deliver it to the court
  in-person or by mail.
fields:
  - Do you want to e-file?: user_wants_efile
    datatype: yesnoradio
---
template: to_make_an_account_you_need_template
subject: |
  What do I need to make an account?
content: |
  To make an account, you will need:
  
  * an email address you can access,
  * a phone number, and
  * an address where you can get mail.  
---
comment: |
  TODO: this might need to be modified to prevent loading the old address on the user? Presumably they moved by now

  It's not easy to understand where the address comes from yet, though.
need:
  - users
  - to_add_participants
  - is_user_party
  - is_other_party
  - other_parties
only sets: add_existing_users
code: |
  weird_roles = []
  other_parties.clear()
  for partip in to_add_participants:
    partip.is_new = False
    if is_user_party(partip):
      users.append(partip.copy_deep(f'users[{len(users.elements)}]'))
      if hasattr(users[-1].address, 'address'):
        users[-1].address.geocode()
    elif is_other_party(partip):
      other_parties.append(partip.copy_deep(f'other_parties[{len(other_parties.elements)}]'))
      if hasattr(other_parties[-1].address, 'address'):
        other_parties[-1].address.geocode()
    else:
      weird_roles.append(partip)
      log(f'partip: {partip} has weird role: {partip.party_type}')
  # If there are any roles that can't be placed, be we also couldn't find an opposing party,
  # the weird roles are more than likely the opposing party
  if weird_roles:
    if len(other_parties.elements) == 0:
      for weird_party in weird_roles:
        other_parties.append(weird_party.copy_deep(f'other_parties[{len(other_parties.elements)}]'))
  
  # We finished gathering both lists, no need to add more people
  users.there_is_another = False
  other_parties.there_is_another = False
  
  add_existing_users = True
---
code: |
  # We might load the user's old address from the e-filed case. But they probably don't live there anymore
  # So we'll clear out the address information from the user object
  for user in users.complete_elements():
    if hasattr(user, 'address') and hasattr(user.address, 'address'):
      undefine(
        user.attr_name("address.address"),
        user.attr_name("address.unit"),
        user.attr_name("address.city"),
        user.attr_name("address.state"),
        user.attr_name("address.zip"),        
      )

  invalidate_address_information_once = True
---
# Turning this code off. We do not allow name lookup anymore, so the party must know the docket number
# code: |
#   if can_check_efile and case_search.found_case:
#     if hasattr(case_search.found_case, 'docket_number') and case_search.found_case.docket_number:
#       docket_number = case_search.found_case.docket_number
---
code: |
  # Because we cannot do name lookup
  case_search.do_what_choice = "docket_lookup"
---
code: |
  # Because we cannot do name lookup
  case_search.docket_number_from_user = docket_number
---
# Overrides a block from EFSPIntegration:case_search.yml
# Forces a user to already be involved in the current case
generic object: EFCaseSearch
code: |
  if len(x.maybe_user_partips) == 1:
    person_word = word(x.maybe_user_partips[0].name.familiar())
  else:
    person_word = word('one of them')

  if logged_in_user_is_admin:
    x.self_in_case_choices = [
      ['is_filing', word(f'I am filing for { person_word }')]
    ]
  else:
    x.self_in_case_choices = [
      ['is_self', word('Yes')],
      ['is_filing', word(f'No, but I am filing for { person_word }')]
    ]
---
# Overrides a block from EFSPIntegration:case_search.yml
# Adds note to help guide users
id: found-this-participant
generic object: EFCaseSearch
if: len(x.maybe_user_partips) == 1
question: |
  We found this participant in the existing case
subquestion: |
  Are you ${ x.maybe_user_partips[0] }?
fields:
  - no label: x.self_in_case
    datatype: radio
    code: |
      x.self_in_case_choices
  - note: |
      If none of the options above apply to you, click "undo" below and search for a different docket number.
---
# Overrides a block from EFSPIntegration:case_search.yml
# Adds note to help guide users
id: found-these-participants
generic object: EFCaseSearch
if: len(x.maybe_user_partips) > 1
question: |
  We found these participants in the existing case
subquestion: |
  % for partip in x.maybe_user_partips:
  * ${ partip }
  % endfor
  
  Are you any of the above participants?
fields:
  - no label: x.self_in_case
    datatype: radio
    code: |
      x.self_in_case_choices
  - I am: x.self_partip_choice
    datatype: object_radio
    choices: |
      x.maybe_user_partips
    js show if: |
      val("x.self_in_case") == "is_self"
  - I am filing for: x.self_partip_choice
    datatype: object_radio
    choices: |
      x.maybe_user_partips
    js show if: |
      val("x.self_in_case") == "is_filing"
  - note: |
      If none of the options above apply to you, click "undo" below and search for a different docket number.
---
code: |
  # petition_to_seal_eviction_attachment.filing_description = "Petition to Seal Eviction Record"
  # petition_to_seal_eviction_attachment.reference_number = docket_number

  al_court_bundle.filing_description = "Petition to Seal Eviction Record"
  al_court_bundle.reference_number = docket_number
---
code: |
  needs_all_info = False
---
# generic object: ALDocument
# id: extra e-filing questions
# question: |
#   Send a copy of this filing to someone else?
# subquestion: |
#   If you answer "yes", a copy of all notices will be delivered to the email below when the
#   document is electronically filed.
# fields:
#   - Add a courtesy email: x.has_courtesy_copies
#     datatype: yesnoradio
#   - Courtesy emails (one per line): x.courtesy_copies_raw
#     datatype: area
#     show if: x.has_courtesy_copies
# ---
# generic object: ALDocumentBundle
# id: extra e-filing questions
# question: |
#   Send a copy of this filing to someone else?
# subquestion: |
#   If you answer "yes", a copy of all notices will be delivered to the email below when the
#   document is electronically filed.
# fields:
#   - Add a courtesy email: x.has_courtesy_copies
#     datatype: yesnoradio
#   - Courtesy emails (one per line): x.courtesy_copies_raw
#     datatype: area
#     show if: x.has_courtesy_copies
---
####### Skip the courtesy copies as trial court thinks this is redundant with the "send a copy by email" button we already have ##########
---
generic object: ALDocument
code: |
  x.has_courtesy_copies = False
---
generic object: ALDocumentBundle
code: |
  x.has_courtesy_copies = False
# ---
# code: |
#   al_court_bundle.existing_parties_payment_dict = DADict(elements={party: True for party in all_case_parties})
---
code: |
  al_court_bundle.filing_action = "efile"
---
generic object: ALDdocument
code: |
  x.filing_parties = ['users[0]']
---
code: |
  # We have 2 disclaimers that the court is letting us skip because they are irrelevant to this particular filing
  # In theory, we should check for new ones they didn't tell us about yet!
  redundant_disclaimer_keywords = [
    "redacting",
    "must redact",
    "still must perfect personal service on a defendant"
  ]
  disclaimers_tmp = []
  for dis in sorted(proxy_conn.get_disclaimers(court_id).data, key=lambda yy: yy.get("listorder", yy.get("code"))):
    for keyword in redundant_disclaimer_keywords:
      if keyword in dis.get('requirementText').lower():
        break
    else:
      disclaimers_tmp.append(dis)
  
  disclaimers = disclaimers_tmp
---
code: |
  # Keeping this in because I think it helps catch
  # e-filing issues, although calculating fees
  # isn't always exactly the same as trying to file (different behavior)
  if fees_resp.is_ok():
    pass # There are never fees in this filing
  else:
    bad_fees
  review_fees = True
---
id: eFile Login
question: |
  Connect to your eFileMA account
subquestion: |
  You need to use an eFileMA account to e-file this document. If you don't have an account yet, we can help you make one.

  ${ collapse_template(what_is_efile_ma_template) }
fields:
  - I want to: user_login_or_make_new
    datatype: radio
    choices:
      - Make a new account: new_account
      - Login to my existing account: existing_account
  - Email address: my_username
    show if:
      variable: user_login_or_make_new
      is: existing_account
    default: |
      ${ showifdef("person_to_reg.email") or (user_info().email if user_logged_in() else '') }
  - Password: my_password
    datatype: ALVisiblePassword
    js show if: |
      val("user_login_or_make_new") == "existing_account" && !val("user_forgot_password")
    default: |
      ${ showifdef("new_password") }
  - I forgot my password: user_forgot_password
    datatype: yesno
    show if:
      variable: user_login_or_make_new
      is: existing_account
---
template: what_is_efile_ma_template
subject: |
  What is eFileMA?
content: |
  eFileMA is the Massachusetts Trial Court's official system for electronically
  filing court documents. It is also called File and Serve.

  This website can help you securely connect to eFileMA using your existing eFileMA
  username and password, or to make a new account.

  You can manage your account from the eFileMA website after we help you make it
  here.
---
code: |
  # Firm registration exists, but we don't really need to handle it!
  reg_type = 'INDIVIDUAL'
---
id: registration info
question: |
  Create an efileMA account
fields:
  - Email address: person_to_reg.email
    datatype: email
    default: ${ user_info().email if user_logged_in() else ''}
  - Phone number: person_to_reg.phone_number
    datatype: al_international_phone
  - Password: new_password
    datatype: ALVisiblePassword
    under text: |
      ${ password_rules.get("validationmessage") }
    validate: proxy_conn.is_valid_password
  - note: |
      ---
  - First: person_to_reg.name.first
  - Middle: person_to_reg.name.middle
    required: False
  - Last: person_to_reg.name.last
  - Suffix: person_to_reg.name.suffix
    required: False
    code: name_suffix()
  - note: |
      ---
  - Address: person_to_reg.address.address
    address autocomplete: True
  - Unit: person_to_reg.address.unit
    required: False
  - City: person_to_reg.address.city
  - State: person_to_reg.address.state
    code: states_list()
  - Zip: person_to_reg.address.zip

---
only sets:
  - tyler_login
code: |
  if user_login_or_make_new == 'new_account':
    person_to_reg.email
    tyler_register_resp = proxy_conn.register_user(person_to_reg, registration_type=reg_type)
    if not tyler_register_resp.is_ok():
      log(f'Failed to register: {tyler_register_resp}')
    register_status

  elif showifdef('user_forgot_password'):
    tyler_reset_password_resp = proxy_conn.reset_user_password(my_username)
    reset_password_screen      
  
  if not showifdef('user_forgot_password'):
    # try logging in with new credentials or if it's a regular login
    tyler_login_resp = proxy_conn.authenticate_user(tyler_email=my_username, tyler_password=my_password)
    # undefine("my_password")
    if not tyler_login_resp.is_ok():
      log(f'Failed to login: {tyler_login_resp}')
      login_failed_screen
    else:
      log(word("You are now connected to your e-filing account"), "primary")
  continue_stored_login = False # this is triggering when it shouldn't, maybe this is helpful?
  tyler_login = True
---
need:
  - proxy_conn
  - da_store
code: |
    tyler_header_name = f"TYLER-TOKEN-{jurisdiction_id.upper()}"
    tyler_id_name = f"TYLER-ID-{jurisdiction_id}"
    try:
      if da_store.defined("EFSP-" + tyler_header_name):
        proxy_conn.proxy_client.headers[tyler_header_name] = da_store.get("EFSP-" + tyler_header_name)
        proxy_conn.proxy_client.headers[tyler_id_name] = da_store.get("EFSP-" + tyler_id_name)
        tyler_user = proxy_conn.get_user()
        if tyler_user.is_ok():
          my_username = tyler_user.data.get('email')
          if continue_stored_login:
            log(word("You are now connected to your e-filing account") + f" ({my_username})", "primary")
            logged_in_user_is_admin, logged_in_user_is_global_admin = get_tyler_roles(proxy_conn, None, tyler_user)
            tyler_login = True
          else:
            da_store.set("EFSP-" + tyler_header_name, '')
            da_store.set(tyler_user_id_key, '')
    except NameError as err:
      # Re-raise only name errors, so DA can work correctly
      raise err
    except Exception as ex:
      log_error_and_notify(f"Error when trying to get da_store Tyler token: {ex}")

---
if: can_connect_to_proxy
id: unauth-register-done
question: |
  % if register_resp.is_ok():
  Successfully registered
  % else:
  Something went wrong when we tried to register your account
  % endif
subquestion: |
  % if register_resp.is_ok():
  You will get an email from efile${ state_name_to_code(jurisdiction_id) } asking you to activate your account.

  Click "next" when you have clicked the link to activate your account.

  % else:
  ${ debug_display(register_resp) }
  % endif

continue button field: register_status  
---
generic object: ALDocument
code: |
  x.filing_parties = ['users[0]']
---
generic object: ALDocumentBundle
code: |
  x.filing_parties = ['users[0]']
---
id: display case
generic object: EFCaseSearch
continue button field: x.display_case
question: |
  We found your case
subquestion: |
  % if x.cms_connection_issue:
  The court's case management system is currently offline. The case information might be out of date.
  % endif
  
  % if x.found_case:
  #### ${ x.found_case.title} ${ '(' + x.found_case.date + ')' if x.found_case.date.year > 1000 else '' }
  * ${ str(x.docket_lookup_choice) }: ${ x.found_case.docket_number }
  * Court ID: ${ x.found_case.court_id }
  * Case Category: ${ x.found_case.case_category_name }
  * Case Type: ${ x.found_case.case_type_name }  
  % endif

  ${ collapse_template(x.not_actually_case) }
---
generic object: EFCaseSearch
code: |
  # Note the proxy connection needs to be called proxy_conn for this to work
  x.found_case.case_type_name = proxy_conn.get_case_type(court_id, x.found_case.case_type).data.get('name', x.found_case.case_type)
  x.found_case.case_category_name = x.case_category_map.get(x.found_case.category, {}).get('name', x.found_case.category)
---
generic object: EFCaseSearch
code: |
  # found case instance name might be weird if it's a name search
  x.found_cases[i].case_type_name = proxy_conn.get_case_type(court_id, x.found_cases[i].case_type).data.get('name', x.found_cases[i].case_type)
  x.found_cases[i].case_category_name = x.case_category_map.get(x.found_cases[i].category, {}).get('name', x.found_cases[i].category)
---
generic object: EFCaseSearch
template: x.not_actually_case
subject: |
  What if this is not my case?
content: |
  If we found the wrong case, you can press the "${ all_variables(special="titles").get("back button label", "back") }" button to go back and find a different case
---
code: |
  if can_check_efile and case_search.found_case and trial_court.department == "Housing Court":
    if 'no cause' in case_search.found_case.case_type_name.lower():
      predicted_eviction_reason = "eviction_reason_nofault"
    elif 'cause' in case_search.found_case.case_type_name.lower():
      predicted_eviction_reason = "eviction_reason_fault"
    elif 'non-payment' in case_search.found_case.case_type_name.lower():
      predicted_eviction_reason = "eviction_reason_nonpayment"
    elif 'foreclosure' in case_search.found_case.case_type_name.lower():
      predicted_eviction_reason = "eviction_reason_foreclosure"
    elif "civil" in case_search.found_case.case_type_name.lower() or "restraining order" in case_search.found_case.case_type_name.lower():
      predicted_eviction_reason = "eviction_reason_139"
    else:
      predicted_eviction_reason = None
  else:
    predicted_eviction_reason = None
---
id: warn_sorry_not_efileable
continue button field: warn_sorry_not_efileable
decoration: info-circle
question: |
  You cannot e-file this document
subquestion: |
  This document cannot currently be e-filed. 
  
  % if trial_court.department == "Superior Court":
  This document cannot be e-filed in the Superior Court. You can still file this document in-person at the court.

  % else:
  Only cases that are coded as "Summary Process" can be e-filed right now.

  % if predicted_eviction_reason == "eviction_reason_139":
  This case looks like it is a civil or 139 § 19 case. You can still file this document in-person at the court.
  % else:
  It does not look like this is an eviction case. You can still bring this document in-person
  to the court and talk to a clerk about your sealing options.
  % endif
  % endif
---
id: submitted form
question: |
  % if efile_resp.response_code == 200:
  Your forms are on their way to ${ trial_court }
  % else:
  Something went wrong delivering your form
  % endif
subquestion: |
  % if efile_resp.response_code == 200:
  You should receive a confirmation email within 10-15 minutes. The court will contact you with next steps.
  
  We recommend you continue below to download the form for your own records.
  Click **Next** to get a copy of your forms and instructions.
  % endif

  ${ collapse_template(debug_details) }

continue button field: show_efile_resp
---
generic object: EFCaseSearch
template: x.docket_lookup_choice
content: |
  Docket number
---
id: docket id
generic object: EFCaseSearch
question: |
  What is the docket number (sometimes called the "case number") for your eviction case?
subquestion: |
  We will search for your case using the docket number you enter below. Review and
  make sure that it is correct.

  ${ collapse_template(find_my_docket_number_template) }
fields:
  - ${ str(x.docket_lookup_choice) }: x.docket_number_from_user
    under text: |
      Example: **30H84SP009123**. (This is not a real docket number. Use the number on your paperwork.)
  - note: |
      This might not be a valid docket number. Check the number on your paperwork,
      and make sure you do not include any spaces or dashes. Letters in a docket
      number are usually uppercase.
    js show if: | # Use javascript to validate the docket number
      val("docket_number") != "" &&  
            !/^\d{2,4}(?:[A-Z]\d{2}|\d{2})[A-Z]{2}\d+$/.test(
              val("docket_number")
            );
---
only sets:
  - x.found_case
generic object: EFCaseSearch
if: |
  x.do_what_choice == 'party_search'
code: |
  x.somebody.name.first
  if not x.case_search_task_status.ready():
    x.case_search_waiting_screen
  else:
    x.cms_connection_issue
    x.found_cases
    if x.found_cases.gathered and x.found_cases:
      x.found_case = x.case_choice
      x.found_case.instanceName = x.attr_name("found_case") # Rewrite the instanceName
    else:
      x.warn_no_results
      x.found_case = None
---
only sets: 
  - login_failed_screen
id: Login failed
continue button field: login_failed_screen
question: |
  eFile${ state_name_to_code(jurisdiction_id) } Login failed
subquestion: |
  % if int(tyler_login_resp.response_code) == 403:
  Your login information was not correct. Go back and try again.

  You can reset your password if you think your password is wrong.
  
  ${ action_button_html(interview_url(i=logged_out_interview, reset=1, jurisdiction_id=jurisdiction_id), label="Reset your password", new_window=True)}

  You can also register for an account if you do not have one yet.

  ${ action_button_html(interview_url(i=logged_out_interview, reset=1, jurisdiction_id=jurisdiction_id), label="Register for a new account", new_window=True)}

  % else:
  Something went wrong when logging you in (maybe the e-filing server is offline?). We will not be able to e-file your form.

  <div class="d-flex justify-content-center align-items-center h-100">
    <div class="alert alert-warning text-center" role="alert">
      Status ${ tyler_login_resp.response_code }
    </div>
  </div>

  % endif

  Click **Next** to continue with the rest of the interview, or **Back** to try again.
validation code: |
  can_check_efile = False
back button label: Back
---
id: ready to efile
question: |
  Final review before e-filing
subquestion: |
  
  % if ready_to_efile:
  Below is your Petition to Seal Eviction
  that we will deliver to the ${trial_court} clerk.

  We will deliver it securely. Please allow up to 15 minutes for the filing to
  arrive. We will email you a confirmation that it was delivered and additional
  information about what's next.
  
  Click **Back** if you need to make any changes.
  Click **Send to court** to deliver it.
  
  Here is what the ${trial_court} clerk will get:
  % else:

  We ran into some technical problems and there was a problem delivering this to the ${ trial_court}.
  You can download the form below to print and submit.

  % endif

  ${ al_court_bundle.as_pdf(key="final") }

  % if ready_to_efile:
  Your forms are not e-filed until you press **Send to court** below.
  % endif
continue button field: efile_user_reviewed
continue button label: ":file-export: Send to court"
---
generic object: ALDocumentBundle
code: |
  if x.enabled:
    x.filing_type
    x.filing_component_options
    x.document_type_options
    if len(x.enabled_documents()) > 1 and len(x.filing_component_options) == 1 and not x.filing_component_map[x.filing_component_options[0][0]]['allowmultiple']:
      x.filing_component
      x.document_type
      x.tyler_merge_attachments = True
    else:
      for subdoc in x.enabled_documents():
        subdoc.filing_type = x.filing_type
        subdoc.filing_component_options = x.filing_component_options
        subdoc.filing_component_map = x.filing_component_map
        subdoc.filing_component
        subdoc.document_type_options = x.document_type_options
        subdoc.document_type_map = x.document_type_map
        subdoc.document_type
    x.filing_description
    if filing_comment_datafield.get("isvisible"):
      x.filing_comment
    x.reference_number
    x.motion_type
    x.filing_parties
    x.filing_action
    x.has_courtesy_copies
    x.added_necessary_opt_services
    x.optional_services.gather()
    x.filing_attorney
    # x.as_pdf('preview', refresh=False)
  x.completed = True
---
generic object: ALDocumentBundle
code: |
  x.filing_attorney = "" # TODO: I don't actually know where this is supposed to be set to a real value. It only broke in production on docket 18H84SP004193
---
generic object: ALDocument
code: |
  x.filing_attorney = "" # TODO: See above - don't know why we need this or if setting it to "" might break something else later
---
only sets:
  - case_search.warn_no_results
if: not case_search.can_file_non_indexed_case
id: no cases found, fail
continue button field: case_search.warn_no_results
question: |
  No cases found
subquestion: |
  % if case_search.cms_connection_issue:
  This may be because the court's case management system is currently offline.
  % endif

  % if case_search.search_went_wrong():
  Something went wrong with the e-filing system when searching for cases.
  % endif

  You can:

  * Click **Back** to try again with a different docket number
  * Click **Next** to continue with the rest of the interview without e-filing
back button label: Back
validation code: |
  can_check_efile = False
# Seems like this should work, but it doesn't * [Try a different docket number](${ url_ask(['docket_number', {"recompute": ["case_search.docket_number_from_user", "case_search.found_case"] }, "case_search.found_case"]) }) to search for a different case, or